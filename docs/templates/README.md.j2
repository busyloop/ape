{#-
 # Run `make README.md` to compile this template and overwrite README.md
-#}
<!--
{{'RG8gbm90IGVkaXQgdGhpcyBmaWxlLiBFZGl0ICdkb2NzL3RlbXBsYXRlcy9SRUFETUUubWQuajInIGluc3RlYWQgYW5kIHJ1biAnbWFrZSBSRUFETUUubWQnLg==' | b64decode}}
-->

# ape

[![Build](https://github.com/busyloop/ape/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/busyloop/ape/actions/workflows/ci.yml?query=branch%3Amaster) [![GitHub](https://img.shields.io/github/license/busyloop/ape)](https://en.wikipedia.org/wiki/MIT_License) [![GitHub release](https://img.shields.io/github/release/busyloop/ape.svg)](https://github.com/busyloop/ape/releases)

<img src="./assets/mugshot.png" alt="🐒" width="342" align="right" />

Ape deterministically derives an [age secret key](https://github.com/FiloSottile/age) from a passphrase via $sha256(argon2id(passphrase))$ 
and wraps   
age for decryption.

## Installation

➜ `brew install busyloop/tap/ape`

(or: [Download static binary](https://github.com/busyloop/ape/releases/latest))


## Usage

Run `ape` to derive a key.  
Or pipe data to `ape` to decrypt.


## Stay safe :shield:

* Only run _ape_ on trusted and preferably air-gapped hardware.

* You need 2GB of RAM and a few seconds of patience.  

* Ape employs [argon2id](https://github.com/P-H-C/phc-winner-argon2) to make your passphrase hard to guess for a machine.  
  It is up to [you](https://www.youtube.com/watch?v=20LuSlZT4S4) to ensure that it is also hard to guess for a human.  

  

## Contributing

1. Fork it (<https://github.com/busyloop/ape/fork>)
2. Create your feature branch (`git checkout -b my-new-feature`)
3. Commit your changes (`git commit -am 'Add some feature'`)
4. Push to the branch (`git push origin my-new-feature`)
5. Create a new Pull Request

